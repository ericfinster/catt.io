#
#  cylfull.catt - full cylinder contexts
#

coh id {C : Cat} (x :: C)
  : x => x

let ct1 {C : Cat}
    {x :: Arr C}
    {y :: Arr C} (f :: x => y)
  : Cat
  = ucomp [ 1 0 1 ] (base f) (core y) =>
    ucomp [ 1 0 1 ] (core x) (lid f)

let ct2 {C : Cat}
    {x :: Arr C}
    {y :: Arr C} {f :: x => y}
                 {g :: x => y} (a :: f => g)
  : Cat
  = ucomp [ 2 1 2 ] (ucomp [ 2 0 1 ] (base a) (core y)) (core g) =>
    ucomp [ 2 1 2 ] (core f) (ucomp [ 1 0 2 ] (core x) (lid a))

# let J {C : Cat}
#     {x :: Arr C}
#     {y :: Arr C} {f :: x => y}
#                  {g :: x => y} (a :: f => g)
#     {z :: Arr C} (h :: y => z) 
#   =

# let K {C : Cat}
#     {x :: Arr C}
#     {y :: Arr C} {f :: x => y}
#                  {g :: x => y} (a :: f => g)
#     {z :: Arr C} (h :: y => z)
#   : 


